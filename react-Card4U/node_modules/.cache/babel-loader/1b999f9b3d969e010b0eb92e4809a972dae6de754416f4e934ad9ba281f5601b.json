{"ast":null,"code":"import axios from \"axios\";\nconst api = process.env.REACT_APP_API + \"/cardlists\" || \"\";\nexport function getList() {\n  return axios.get(api, {\n    headers: {\n      Authorization: JSON.parse(localStorage.getItem(\"userData\")).token\n    }\n  });\n}\nexport function addCardtoClist(card) {\n  return axios.post(api, card, {\n    headers: {\n      Authorization: JSON.parse(localStorage.getItem(\"userData\")).token\n    }\n  });\n}\n// export function addCardList(userId: number){\n//     return axios.post(api,{userId: userId,cards: [],quantity: 0});\n// }\n\n// export async function getAllCards(){\n//     let res = await axios.get(api);\n//     let allCardsArr: Card[] = []\n//     for (const list of res.data) {\n//         for (const card of list.cards) {\n//             allCardsArr.push(card);\n//         }\n//     }\n//     return new Promise((res,rej)=>{\n//         if(allCardsArr.length){\n//             res(allCardsArr);\n//         }else{\n//             rej(\"no cards!\")\n//         }\n\n//     })\n\n// }\n\n// export async function addCardToList (userId: number,card:Card){\n//     let res = await axios.get(`${api}?userId=${userId}`);\n//     let cardArr = res.data[0].cards;\n//     let qua = res.data[0].quantity;\n//     qua++;\n//     localStorage.setItem(\"quantity\",`${qua}`);\n//     cardArr.push(card);\n//     return await axios.patch(`${api}/${res.data[0].id}`,{cards: cardArr, quantity: qua});\n// }\n// export async function deleteCardById(userId:number, cardDes:string){\n//     let res = await axios.get(`${api}?userId=${userId}`);\n//     let cardArr = res.data[0].cards;\n//     let listId = res.data[0].id;\n//     let qua = res.data[0].quantity;\n//     qua = qua-1;\n//     for (const card of cardArr) {\n//         if(card.businessDescription == cardDes){\n//             cardArr.splice(cardArr.indexOf(card),1);\n//         } \n//     }\n//     return new Promise((res,rej) =>{\n//         res(axios.patch(`${api}/${listId}`,{cards: cardArr, quantity: qua}).then(() => {successMsg(\"Card Deleted!\"); localStorage.setItem(\"quantity\",`${qua}`);}).catch((err) => console.log(err)));\n//     })\n// }\n\n// export async function getCardByDes(userId: number, cardDes:string){\n//     let res = await axios.get(`${api}?userId=${userId}`);\n//     let cardArr = res.data[0].cards;\n//     let cardToFind: Card;\n\n//     for (const card of cardArr) {\n//         if(card.businessDescription == cardDes){\n//             cardToFind = card;\n\n//         }\n//     }\n//     return new Promise((res,rej) =>{\n//         if(cardToFind == null){\n//             return rej(\"no card found\");\n//         }else{\n//             return res(cardToFind);\n//         }\n//     })\n// }\n\n// export async function updateCardByDes(userId:number, newCard: Card, cardDes:string){\n//     let res = await axios.get(`${api}?userId=${userId}`);\n//     let cardArr = res.data[0].cards;\n//     let listId = res.data[0].id;\n//     let newArr: Card[] = [];\n//     for (let card of cardArr) {\n//         if(card.businessDescription == cardDes){\n//             newArr.push(newCard);\n//         }else{\n//             newArr.push(card);\n//         }\n//     }\n//     return new Promise((res,rej) =>{\n//         res(axios.patch(`${api}/${listId}`,{cards: newArr}).then(() => {}).catch((err) => console.log(err)));\n//     })\n\n// }\n\n// export async function getCardListById (userId:number){\n//     let res = await axios.get(`${api}?userId=${userId}`);\n//     return await axios.get(`${api}/${res.data[0].id}`);\n// }","map":{"version":3,"names":["axios","api","process","env","REACT_APP_API","getList","get","headers","Authorization","JSON","parse","localStorage","getItem","token","addCardtoClist","card","post"],"sources":["C:/Users/user/Desktop/prj node+react/‏‏reactProj-Card4U סופי/reactproject/src/services/cardList.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport Card from \"../interfaces/card\";\r\nimport { successMsg } from \"./feedbacks\";\r\n\r\nconst api: string = process.env.REACT_APP_API + \"/cardlists\" || \"\";\r\n\r\nexport function getList(){\r\n    return axios.get(api,{\r\n        headers: {Authorization: JSON.parse(localStorage.getItem(\"userData\") as string).token}})\r\n}\r\n\r\nexport function addCardtoClist(card: Card){\r\n    return axios.post(api,card,{\r\n        headers: {Authorization: JSON.parse(localStorage.getItem(\"userData\") as string).token}})\r\n}\r\n// export function addCardList(userId: number){\r\n//     return axios.post(api,{userId: userId,cards: [],quantity: 0});\r\n// }\r\n\r\n// export async function getAllCards(){\r\n//     let res = await axios.get(api);\r\n//     let allCardsArr: Card[] = []\r\n//     for (const list of res.data) {\r\n//         for (const card of list.cards) {\r\n//             allCardsArr.push(card);\r\n//         }\r\n//     }\r\n//     return new Promise((res,rej)=>{\r\n//         if(allCardsArr.length){\r\n//             res(allCardsArr);\r\n//         }else{\r\n//             rej(\"no cards!\")\r\n//         }\r\n\r\n//     })\r\n    \r\n// }\r\n\r\n// export async function addCardToList (userId: number,card:Card){\r\n//     let res = await axios.get(`${api}?userId=${userId}`);\r\n//     let cardArr = res.data[0].cards;\r\n//     let qua = res.data[0].quantity;\r\n//     qua++;\r\n//     localStorage.setItem(\"quantity\",`${qua}`);\r\n//     cardArr.push(card);\r\n//     return await axios.patch(`${api}/${res.data[0].id}`,{cards: cardArr, quantity: qua});\r\n// }\r\n// export async function deleteCardById(userId:number, cardDes:string){\r\n//     let res = await axios.get(`${api}?userId=${userId}`);\r\n//     let cardArr = res.data[0].cards;\r\n//     let listId = res.data[0].id;\r\n//     let qua = res.data[0].quantity;\r\n//     qua = qua-1;\r\n//     for (const card of cardArr) {\r\n//         if(card.businessDescription == cardDes){\r\n//             cardArr.splice(cardArr.indexOf(card),1);\r\n//         } \r\n//     }\r\n//     return new Promise((res,rej) =>{\r\n//         res(axios.patch(`${api}/${listId}`,{cards: cardArr, quantity: qua}).then(() => {successMsg(\"Card Deleted!\"); localStorage.setItem(\"quantity\",`${qua}`);}).catch((err) => console.log(err)));\r\n//     })\r\n// }\r\n\r\n\r\n// export async function getCardByDes(userId: number, cardDes:string){\r\n//     let res = await axios.get(`${api}?userId=${userId}`);\r\n//     let cardArr = res.data[0].cards;\r\n//     let cardToFind: Card;\r\n    \r\n//     for (const card of cardArr) {\r\n//         if(card.businessDescription == cardDes){\r\n//             cardToFind = card;\r\n            \r\n//         }\r\n//     }\r\n//     return new Promise((res,rej) =>{\r\n//         if(cardToFind == null){\r\n//             return rej(\"no card found\");\r\n//         }else{\r\n//             return res(cardToFind);\r\n//         }\r\n//     })\r\n// }\r\n\r\n// export async function updateCardByDes(userId:number, newCard: Card, cardDes:string){\r\n//     let res = await axios.get(`${api}?userId=${userId}`);\r\n//     let cardArr = res.data[0].cards;\r\n//     let listId = res.data[0].id;\r\n//     let newArr: Card[] = [];\r\n//     for (let card of cardArr) {\r\n//         if(card.businessDescription == cardDes){\r\n//             newArr.push(newCard);\r\n//         }else{\r\n//             newArr.push(card);\r\n//         }\r\n//     }\r\n//     return new Promise((res,rej) =>{\r\n//         res(axios.patch(`${api}/${listId}`,{cards: newArr}).then(() => {}).catch((err) => console.log(err)));\r\n//     })\r\n\r\n// }\r\n\r\n\r\n// export async function getCardListById (userId:number){\r\n//     let res = await axios.get(`${api}?userId=${userId}`);\r\n//     return await axios.get(`${api}/${res.data[0].id}`);\r\n// }\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,GAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,aAAa,GAAG,YAAY,IAAI,EAAE;AAElE,OAAO,SAASC,OAAO,GAAE;EACrB,OAAOL,KAAK,CAACM,GAAG,CAACL,GAAG,EAAC;IACjBM,OAAO,EAAE;MAACC,aAAa,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAW,CAACC;IAAK;EAAC,CAAC,CAAC;AAChG;AAEA,OAAO,SAASC,cAAc,CAACC,IAAU,EAAC;EACtC,OAAOf,KAAK,CAACgB,IAAI,CAACf,GAAG,EAACc,IAAI,EAAC;IACvBR,OAAO,EAAE;MAACC,aAAa,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAW,CAACC;IAAK;EAAC,CAAC,CAAC;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}