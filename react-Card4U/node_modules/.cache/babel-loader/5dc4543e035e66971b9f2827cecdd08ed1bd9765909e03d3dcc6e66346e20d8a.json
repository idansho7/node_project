{"ast":null,"code":"import axios from \"axios\";\nimport { successMsg } from \"./feedbacks\";\nconst api = process.env.REACT_APP_API + \"/cardLists\" || \"\";\nexport function addCardList(userId) {\n  return axios.post(api, {\n    userId: userId,\n    cards: [],\n    quantity: 0\n  });\n}\nexport async function getAllCards() {\n  let res = await axios.get(api);\n  let allCardsArr = [];\n  for (const list of res.data) {\n    for (const card of list.cards) {\n      allCardsArr.push(card);\n    }\n  }\n  return new Promise((res, rej) => {\n    if (allCardsArr.length) {\n      res(allCardsArr);\n    } else {\n      rej(\"no cards!\");\n    }\n  });\n}\nexport async function addCardToList(userId, card) {\n  let res = await axios.get(`${api}?userId=${userId}`);\n  let cardArr = res.data[0].cards;\n  let qua = res.data[0].quantity;\n  qua++;\n  localStorage.setItem(\"quantity\", `${qua}`);\n  cardArr.push(card);\n  return await axios.patch(`${api}/${res.data[0].id}`, {\n    cards: cardArr,\n    quantity: qua\n  });\n}\nexport async function getCardById(userId, cardId) {\n  let res = await axios.get(`${api}?userId=${userId}`);\n  let cardArr = res.data[0].cards;\n  let cartToFind;\n  for (const card of cardArr) {\n    if (card.id == cardId) {\n      cartToFind = card;\n    }\n  }\n  return new Promise((res, rej) => {\n    if (cartToFind == null) {\n      return rej(\"no card found\");\n    } else {\n      return res(cartToFind);\n    }\n  });\n}\nexport async function updateCardById(userId, newCard, cardId) {\n  let res = await axios.get(`${api}?userId=${userId}`);\n  let cardArr = res.data[0].cards;\n  let listId = res.data[0].id;\n  for (let card of cardArr) {\n    if (card.id == cardId) {\n      card = newCard;\n    }\n  }\n  return new Promise((res, rej) => {\n    res(axios.patch(`${api}/${listId}`, {\n      cards: cardArr\n    }).then(() => {\n      successMsg(\"Card Updated!\");\n    }));\n  });\n}\nexport async function getCardListById(userId) {\n  let res = await axios.get(`${api}?userId=${userId}`);\n  return await axios.get(`${api}/${res.data[0].id}`);\n}","map":{"version":3,"names":["axios","successMsg","api","process","env","REACT_APP_API","addCardList","userId","post","cards","quantity","getAllCards","res","get","allCardsArr","list","data","card","push","Promise","rej","length","addCardToList","cardArr","qua","localStorage","setItem","patch","id","getCardById","cardId","cartToFind","updateCardById","newCard","listId","then","getCardListById"],"sources":["C:/Users/user/Desktop/ReactProject/reactproject/src/services/cardList.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport Card from \"../interfaces/card\";\r\nimport { successMsg } from \"./feedbacks\";\r\n\r\nconst api: string = process.env.REACT_APP_API + \"/cardLists\" || \"\";\r\nexport function addCardList(userId: number){\r\n    return axios.post(api,{userId: userId,cards: [],quantity: 0});\r\n}\r\n\r\nexport async function getAllCards(){\r\n    let res = await axios.get(api);\r\n    let allCardsArr: Card[] = []\r\n    for (const list of res.data) {\r\n        for (const card of list.cards) {\r\n            allCardsArr.push(card);\r\n        }\r\n    }\r\n    return new Promise((res,rej)=>{\r\n        if(allCardsArr.length){\r\n            res(allCardsArr);\r\n        }else{\r\n            rej(\"no cards!\")\r\n        }\r\n\r\n    })\r\n    \r\n}\r\n\r\nexport async function addCardToList (userId: number,card:Card){\r\n    let res = await axios.get(`${api}?userId=${userId}`);\r\n    let cardArr = res.data[0].cards;\r\n    let qua = res.data[0].quantity;\r\n    qua++;\r\n    localStorage.setItem(\"quantity\",`${qua}`);\r\n    cardArr.push(card);\r\n    return await axios.patch(`${api}/${res.data[0].id}`,{cards: cardArr, quantity: qua});\r\n}\r\n\r\nexport async function getCardById(userId: number, cardId: number){\r\n    let res = await axios.get(`${api}?userId=${userId}`);\r\n    let cardArr = res.data[0].cards;\r\n    let cartToFind: Card;\r\n    for (const card of cardArr) {\r\n        if(card.id == cardId){\r\n            cartToFind = card;\r\n        }\r\n    }\r\n    return new Promise((res,rej) =>{\r\n        if(cartToFind == null){\r\n            return rej(\"no card found\");\r\n        }else{\r\n            return res(cartToFind);\r\n        }\r\n    })\r\n}\r\n\r\nexport async function updateCardById(userId:number, newCard: Card ,cardId:number){\r\n    let res = await axios.get(`${api}?userId=${userId}`);\r\n    let cardArr = res.data[0].cards;\r\n    let listId = res.data[0].id;\r\n    for (let card of cardArr) {\r\n        if(card.id == cardId){\r\n            card = newCard;\r\n        }\r\n    }\r\n    return new Promise((res,rej) =>{\r\n        res(axios.patch(`${api}/${listId}`,{cards: cardArr}).then(() => {successMsg(\"Card Updated!\")}))\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nexport async function getCardListById (userId:number){\r\n    let res = await axios.get(`${api}?userId=${userId}`);\r\n    return await axios.get(`${api}/${res.data[0].id}`);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}